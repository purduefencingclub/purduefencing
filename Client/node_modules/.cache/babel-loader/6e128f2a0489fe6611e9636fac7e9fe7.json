{"ast":null,"code":"import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from \"./types\"; // Register User\n// export const registerUser = (userData, history) => (dispatch) => {\n//   axios\n//     .post(\"/api/users/register\", userData)\n//     .then((res) => history.push(\"/admin\")) // re-direct to login on successful register\n//     .catch((err) =>\n//       dispatch({\n//         type: GET_ERRORS,\n//         payload: err.response.data,\n//       })\n//     );\n// };\n// Login - get user token\n\nexport const loginUser = userData => dispatch => {\n  axios.post(\"/api/users/login\", userData).then(res => {\n    // Save to localStorage\n    // Set token to localStorage\n    const {\n      token\n    } = res.data;\n    localStorage.setItem(\"jwtToken\", token); // Set token to Auth header\n\n    setAuthToken(token); // Decode token to get user data\n\n    const decoded = jwt_decode(token); // Set current user\n\n    dispatch(setCurrentUser(decoded));\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Set logged in user\n\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n}; // User loading\n\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n}; // Log user out\n\nexport const logoutUser = () => dispatch => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\"); // Remove auth header for future requests\n\n  setAuthToken(false); // Set current user to empty object {} which will set isAuthenticated to false\n\n  dispatch(setCurrentUser({}));\n};","map":{"version":3,"sources":["/Users/turtle/purduefencingclub/express-app/Client/src/actions/authActions.js"],"names":["axios","setAuthToken","jwt_decode","GET_ERRORS","SET_CURRENT_USER","USER_LOADING","loginUser","userData","dispatch","post","then","res","token","data","localStorage","setItem","decoded","setCurrentUser","catch","err","type","payload","response","setUserLoading","logoutUser","removeItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,UAAT,EAAqBC,gBAArB,EAAuCC,YAAvC,QAA2D,SAA3D,C,CACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,SAAS,GAAIC,QAAD,IAAeC,QAAD,IAAc;AACnDR,EAAAA,KAAK,CACFS,IADH,CACQ,kBADR,EAC4BF,QAD5B,EAEGG,IAFH,CAESC,GAAD,IAAS;AACb;AACA;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAYD,GAAG,CAACE,IAAtB;AACAC,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCH,KAAjC,EAJa,CAKb;;AACAX,IAAAA,YAAY,CAACW,KAAD,CAAZ,CANa,CAOb;;AACA,UAAMI,OAAO,GAAGd,UAAU,CAACU,KAAD,CAA1B,CARa,CASb;;AACAJ,IAAAA,QAAQ,CAACS,cAAc,CAACD,OAAD,CAAf,CAAR;AACD,GAbH,EAcGE,KAdH,CAcUC,GAAD,IACLX,QAAQ,CAAC;AACPY,IAAAA,IAAI,EAAEjB,UADC;AAEPkB,IAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaT;AAFf,GAAD,CAfZ;AAoBD,CArBM,C,CAsBP;;AACA,OAAO,MAAMI,cAAc,GAAID,OAAD,IAAa;AACzC,SAAO;AACLI,IAAAA,IAAI,EAAEhB,gBADD;AAELiB,IAAAA,OAAO,EAAEL;AAFJ,GAAP;AAID,CALM,C,CAMP;;AACA,OAAO,MAAMO,cAAc,GAAG,MAAM;AAClC,SAAO;AACLH,IAAAA,IAAI,EAAEf;AADD,GAAP;AAGD,CAJM,C,CAKP;;AACA,OAAO,MAAMmB,UAAU,GAAG,MAAOhB,QAAD,IAAc;AAC5C;AACAM,EAAAA,YAAY,CAACW,UAAb,CAAwB,UAAxB,EAF4C,CAG5C;;AACAxB,EAAAA,YAAY,CAAC,KAAD,CAAZ,CAJ4C,CAK5C;;AACAO,EAAAA,QAAQ,CAACS,cAAc,CAAC,EAAD,CAAf,CAAR;AACD,CAPM","sourcesContent":["import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from \"./types\";\n// Register User\n\n// export const registerUser = (userData, history) => (dispatch) => {\n//   axios\n//     .post(\"/api/users/register\", userData)\n//     .then((res) => history.push(\"/admin\")) // re-direct to login on successful register\n//     .catch((err) =>\n//       dispatch({\n//         type: GET_ERRORS,\n//         payload: err.response.data,\n//       })\n//     );\n// };\n// Login - get user token\nexport const loginUser = (userData) => (dispatch) => {\n  axios\n    .post(\"/api/users/login\", userData)\n    .then((res) => {\n      // Save to localStorage\n      // Set token to localStorage\n      const { token } = res.data;\n      localStorage.setItem(\"jwtToken\", token);\n      // Set token to Auth header\n      setAuthToken(token);\n      // Decode token to get user data\n      const decoded = jwt_decode(token);\n      // Set current user\n      dispatch(setCurrentUser(decoded));\n    })\n    .catch((err) =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data,\n      })\n    );\n};\n// Set logged in user\nexport const setCurrentUser = (decoded) => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded,\n  };\n};\n// User loading\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING,\n  };\n};\n// Log user out\nexport const logoutUser = () => (dispatch) => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\");\n  // Remove auth header for future requests\n  setAuthToken(false);\n  // Set current user to empty object {} which will set isAuthenticated to false\n  dispatch(setCurrentUser({}));\n};\n"]},"metadata":{},"sourceType":"module"}